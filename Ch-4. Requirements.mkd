# Requerimientos

Antes de iniciar con el tema de programar es necesario contar con los requerimientos bien especificados, que nos dira que es lo que nuestro programa debe hacer.

## ¿De qué tipos de requisitos estamos hablando?
Realmente estamos hablando de requisitos funcionales, la lista de características que el usuario verá y podrá usar cuando inicie su programa. En lo que respecta al usuario, estos son los únicos requisitos que importan. Para un proceso ágil, el resultado es un conjunto de historias de usuarios que definen el trabajo pendiente del producto.
Durante el proceso de descubrir los requisitos para su proyecto, normalmente verá cuatro tipos diferentes: requisitos de usuario, requisitos de dominio, requisitos no funcionales y no requisitos.

### Requisitos de usuario
Los requisitos del usuario casi siempre se expresan en lenguaje natural. Son los detalles de lo que el usuario espera ver mientras usa el programa. También incluyen descripciones de diseños de pantalla, cuadros de diálogo y menús. Cualquier elemento de interacción en el programa debe describirse en los requisitos del usuario. Por ejemplo:

Iniciar sesión en el sistema: cuando Gloria hace clic en el botón Iniciar sesión en la página principal, aparece un cuadro de diálogo Iniciar sesión en el medio de la pantalla. El cuadro de diálogo de inicio de sesión debe contener dos cuadros de texto, denominados "Nombre de usuario" y "Contraseña". También debe haber dos botones en el cuadro de diálogo, denominados "Enviar" y "Cancelar". Si en algún momento Gloria hace clic en el botón Cancelar, el cuadro de diálogo desaparecerá y volverá a la pantalla anterior.........

Usar maquetas o elemetos graficos que ayuden a la descripcion. 

### Requisitos de dominio

Estos son requisitos que le impone el dominio de aplicación del programa. Si está escribiendo una nueva versión de un programa de impuestos sobre la renta, estará limitado por las últimas regulaciones del IRS. Un programa de libro mayor deberá cumplir con la última edición de los Principios de Contabilidad Generalmente Aceptados (GAAP), y un teléfono inteligente deberá implementar los últimos protocolos del Sistema Global para Comunicaciones Móviles (GSM). 

No es necesario que anotes todos estos requisitos, simplemente consúltalos. 

Un conjunto de requisitos de dominio detallados brinda a los desarrolladores la información que necesitarán durante el diseño del programa. 

**Los requisitos de dominio generalmente se consideran software de “capa intermedia” porque son el corazón de la aplicación, debajo de la interfaz de usuario y encima del sistema operativo, la red o el software de base de datos.**

Muchos requisitos de dominio se implementarán como clases y bibliotecas independientes con sus propias API. Los usuarios se preocupan por los requisitos del dominio sólo en la medida en que afecten a los requisitos del usuario.

### Requerimientos no funcionales
Los requisitos no funcionales son limitaciones de los servicios y funciones del programa y también expectativas sobre el desempeño. Pueden incluir especificaciones de la plataforma de destino, restricciones de tiempo, requisitos de rendimiento, requisitos de uso de memoria, privilegios de acceso a archivos, requisitos de seguridad, tiempos de respuesta, número mínimo de transacciones por segundo, etc. Por lo general, estos son requisitos que pueden no ser visibles para el usuario, pero que sí afectan la experiencia del usuario. Un ejemplo de este tipo de requisito es que su página web debe cargarse y mostrarse en tres segundos.

Es necesario decirles a todas las partes interesadas en un proyecto lo que el programa va a hacer y también lo que no va a hacer. En particular, debe informarles que hay requisitos que no se implementarán, al menos no en la versión actual.

## Recopilación de requisitos en un proyecto basado en un plan

La parte importante y la idea detrás de todo este capítulo es escribir lo que se supone que debe hacer su programa antes de comenzar a codificar.

**¡Pero no me gusta escribir!**

Los requisitos funcionales siempre deben escribirse en un lenguaje natural. 
El lenguaje no sólo determina lo que dices, sino que determina lo que puedes decir (y pensar). Es decir, el lenguaje que utilizas determina qué tipo de pensamientos eres capaz de tener; tiende a limitar tus procesos de pensamiento y, por lo tanto, en qué puedes pensar y cómo expresar tus pensamientos.

**Esquema de una especificación funcional**
Cada especificación de función debe tener los elementos discutidos en las siguientes secciones.

### Descripción general(Overview)

Este es su resumen ejecutivo. Un párrafo o como máximo dos de lo que se supone que debe hacer el programa.

### Descargo de responsabilidad (Disclaimer)
Siempre debe incluir una declaración desde el principio que diga: “Esta especificación aún no está terminada. Si cree que falta algo o que algo está mal, envíeme un correo electrónico”. En algún momento, su descargo de responsabilidad debería cambiar a algo como “Esta especificación es tan completa como lo será para esta versión. Si cree que falta algo o que algo está mal, envíe un correo electrónico al autor y lo consideraremos para la próxima versión”.

### Nombre del Autor(Author’s Name)

Alguien debe ser responsable de la especificación funcional. Ni un comité, ni el equipo de desarrollo, una sola persona. Suele ser el director de desarrollo o el director de proyectos, dependiendo de cómo su empresa configure los proyectos de desarrollo. 

## Escenario de uso ttipico (Scenarios of Typical Usage)

Escenarios de uso típico
Estos son los requisitos reales. Una excelente manera de lograr que los clientes respondan a su lista de requisitos es presentarles varios escenarios de uso típico del programa como parte de la especificación. Esto tiene un par de ventajas:
• Primero, si escribe los escenarios como si fueran historias de usuarios, es más probable que el cliente los lea.
• En segundo lugar, es más probable que los clientes entiendan lo que estás haciendo y propongan ideas sobre cosas que te has pasado por alto o que has hecho mal. Esto siempre es bueno, porque cuantas más aportaciones de los clientes reciba al principio del proceso, más probabilidades tendrá de crear algo que ellos quieran.

En muchas metodologías ágiles, incluido XP, las historias de usuarios suelen escribirse como escenarios. En XP, el cliente es parte del equipo del proyecto, por lo que obtiene comentarios constantes sobre historias de usuarios y compilaciones diarias de programas. En Scrum, no se requiere que el cliente forme parte del equipo del proyecto, pero se le recomienda encarecidamente que se mantenga en estrecho contacto con el equipo. También en Scrum, los sprints más cortos permiten al cliente ver versiones funcionales del producto con más frecuencia. En el Lenguaje Unificado de Modelado (UML, consulte www.uml.org), se utiliza una notación completa para crear casos de uso (otra palabra para escenarios). Pero como ya se mencionó, nada supera al lenguaje natural para describir escenarios de uso. 

## Problemas abiertos(Open Issues)

Cuando escriba por primera vez la especificación funcional, habrá una o dos cosas que no sepa. Esta bien. Simplemente colóquelos en la sección "Problemas abiertos". Luego, cada vez que te reúnas con el cliente, señala esta sección e intenta obtener respuestas. Algunas de estas preguntas pasarán a las secciones de requisitos y otras terminarán en la sección "No requisitos", una vez que obtenga esas respuestas. Sin embargo, al final del proyecto, esta sección debería estar vacía. Si no es así, entonces tienes problemas que te perseguirán.

### Ideas de diseño y nuevas funciones (Design and New Feature Ideas)

Si es como la mayoría de los desarrolladores, intentará diseñar y codificar el programa en su cabeza todo el tiempo que recopile y analice los requisitos. Eso es exactamente lo que hacen los desarrolladores. Los dos tipos de notas que suelen crear los desarrolladores y gerentes de proyectos son notas técnicas que contienen ideas de diseño o codificación para desarrolladores, y notas de marketing que contienen ideas de funciones para el personal de marketing y el cliente. 
**Usar el backlog**

### Una cosa más (one more thing)
Una cosa más sobre la especificación funcional: no te obsesiones. Lo más probable es que haga un buen trabajo al seleccionar los requisitos y anotarlos en la especificación funcional, pero no será tan detallado como desea y no estará completo. No te preocupes. El único momento en que se completa una especificación funcional es cuando se envía la versión. No pierda tiempo intentando corregir cada detalle; No pierda tiempo tratando de extraer todos los requisitos de su cliente. Simplemente no sucederá. Establece un límite de tiempo, haz lo mejor que puedas y déjalo pasar.

## Recopilación de requisitos en un proyecto ágil (Requirements Gathering in an Agile Project)

**No hay especificación funcional fija:**
En proyectos ágiles, no se crea una especificación funcional detallada desde el principio. Se reconoce que los requisitos cambiarán, y se acepta la posibilidad de ajustes continuos a medida que progresa el proyecto.

**Aceptación del cambio:**
La mentalidad ágil implica aceptar y adaptarse a los cambios en los requisitos a lo largo del desarrollo del proyecto. Los equipos ágiles postergan la toma de decisiones sobre requisitos y diseño tanto como sea posible.

**Cliente como parte integral del equipo:**
En entornos ágiles, el cliente forma parte integral del equipo de desarrollo. Esto permite obtener retroalimentación inmediata sobre las implementaciones de funciones y actualizaciones oportunas sobre los requisitos del cliente.

**Historias de usuario como elemento clave:**
La historia del usuario es fundamental en la recopilación de requisitos ágiles. Se describe una característica o escenario que el cliente desea ejecutar, siguiendo la estructura: "Como <rol>, quiero realizar <acción>, de modo que <razón/beneficio>". Esto proporciona información sobre quién, qué y por qué del requisito.

**Enfoque en el quién, qué y por qué:**
Al expresar las historias de usuario, se aborda el "quién" (rol del usuario), el "qué" (acción que se desea realizar) y el "por qué" (razón o beneficio detrás de la acción). Esta estructura ayuda a comprender completamente el contexto del requisito.

En resumen, la recopilación de requisitos en proyectos ágiles se centra en la flexibilidad, la colaboración continua con el cliente y la utilización de historias de usuario para comprender y abordar las necesidades del usuario de manera efectiva.

### Las tres C
Una historia de usuario tiene tres componentes fundamentales. 
- la card
- la conversación
- la confirmación.

### La card

**Soporte Físico para Historias de Usuario:**
Todas las historias de usuario se plasman en tarjetas, que pueden ser notas Post-It, tarjetas índice o pedazos de papel más grandes, destacando la preferencia por un formato físico.

**Invitación a Conversación Colaborativa:**
La tarjeta, aunque contiene la estructura "Como <rol> quiero <acción> para que <beneficio/resultado>," actúa como una invitación a discutir colaborativamente el significado real de la historia y las verdaderas necesidades del usuario.

**Detalle Limitado en la Tarjeta:**
La tarjeta es esencialmente un esbozo de la historia y no proporciona muchos detalles. Sirve como un marcador de posición para el requisito real que se definirá en etapas posteriores del proyecto.

**Formato Físico Preferido:**
Aunque la tarjeta puede variar en su presentación, se destaca que suele ser un objeto físico. Esto enfatiza la tangibilidad como parte integral del proceso.

**Colaboración Continua y Aclaración de Detalles:**
La tarjeta no solo representa la historia de usuario, sino que también fomenta la colaboración. Los interesados pueden escribir, agregar estimaciones y formular preguntas, permitiendo la evolución y clarificación de los requisitos a lo largo del tiempo.

### Conversación
La conversación en un proyecto ágil es un diálogo sustancial que involucra a todos los stakeholders importantes del proyecto, como el product owner o usuario, el equipo de desarrollo, los testers, profesionales de marketing y posiblemente otros participantes. Se trata de una discusión detallada acerca de lo que el product owner realmente desea lograr con la historia de usuario.

### Confirmación
El usuario o propietario del producto proporciona esta información en forma de criterios de aceptación de la historia. Los criterios de aceptación generalmente están escritos en el reverso de la tarjeta como una breve lista con viñetas. Estos criterios terminarán siendo pruebas de aceptación que el propietario del producto utilizará para confirmar que la implementación de la historia es aceptable para el usuario. La mejor manera de crear pruebas de aceptación es que el propietario del producto genere ejemplos de la historia en uso y luego que el equipo de desarrollo automatice los ejemplos. De esa manera, el propietario del producto puede ejecutar las pruebas de aceptación de la función entregada y confirmar si la implementación funciona o no.

## INVEST in Stories
 Bill Wake, in a classic blog post, laid out the characteristics of a good user story using the acronym INVEST.

### Independiente
La idea aquí es que sus historias de usuario sean independientes entre sí. De esa manera, una única historia de usuario (que, según el proceso ágil que esté utilizando, puede requerir varias iteraciones para implementarse por completo) se puede programar e implementar por separado de cualquier otra historia de usuario. Wake da el ejemplo de un pastel de varias capas. Si tomas una porción del pastel, puedes comer (implementar) solo esa porción, independientemente de cualquier otra. Puede que esto no sea del todo posible; piense en cosas como el software de radio de un teléfono móvil. Para probar completamente parte de la interfaz de usuario incorporada en una historia de usuario, es posible que primero deba tener todo el software de radio funcionando. Veremos esta misma idea más adelante como un acoplamiento flexible en el diseño orientado a objetos.

### Negociable
Una buena historia deja espacio para que las partes involucradas negocien los detalles de su implementación; proporciona la esencia del requisito. La historia no es tan específica como para parecer un contrato. Más bien, proporciona al desarrollador un objetivo y permite al propietario y al desarrollador crear una implementación interesante y viable.

### Valioso
Una buena historia de usuario debe ser valiosa para el cliente. Debe describir una característica o un servicio que el cliente desea. Debido a que las historias de usuarios se programarán e implementarán en una iteración de desarrollo, deben agregar valor al producto cuando se complete la iteración. Además, si el equipo decide que una historia de usuario es demasiado grande y debe dividirse en dos o más historias, cada una de ellas debe aportar valor al cliente. Esta idea brinda orientación al equipo de desarrollo sobre cómo dividir historias, basándose en el valor para el cliente, no en la tecnología. 

### Estimable
Las historias de usuarios deben poder estimarse. La estimación es fundamental para el propietario del producto para que pueda asignar una prioridad relativa a la historia. Esta característica también permite al equipo centrarse en el tamaño de la historia. Las historias que son demasiado grandes no se pueden estimar realmente y, por lo tanto, deberían ser candidatas a dividirse. La estimación es parte de la negociación en la conversación. Significa observar tanto el tamaño de la historia como el posible esfuerzo involucrado en implementarla. Si un equipo tiene problemas para estimar el tamaño o el esfuerzo de una historia en particular, es posible que la historia sea demasiado grande y deba dividirse. La estimación es también el primer paso para descomponer la historia en tareas implementables.

### Small
Como se implicó anteriormente, las buenas historias de usuarios deben ser pequeñas. Idealmente, una historia de usuario debería poder implementarse en un solo sprint o iteración. Eso permitirá al equipo de desarrollo descomponer la historia en una serie de pequeñas tareas, idealmente de ocho horas-persona o menos de esfuerzo. También habla de la característica Valor porque si es pequeña, la historia agregará valor para el cliente al final de una sola iteración. Una forma de gestionar el tamaño de las historias es no preocuparse por ellos si la historia tiene baja prioridad. A medida que la historia avance en el trabajo pendiente del producto, se volverá más importante y, en algún momento, será lo suficientemente importante como para hacer una estimación detallada de su esfuerzo. Si es lo suficientemente grande (más largo que una sola iteración), debería considerar dividirlo en historias más pequeñas.

### Teateable
Las buenas historias deben ser testeables. Esto nos remite a la idea de trazabilidad basada en un plan. Una vez implementada, uno debería poder rastrear una característica a través de la implementación y el diseño hasta los requisitos originales. En ágil, esta práctica generalmente se implementa utilizando desarrollo basado en pruebas (TDD) y criterios de aceptación. El propietario del producto escribe los criterios de aceptación y los desarrolladores implementarán las pruebas unitarias que confirmarán que una tarea es correcta. Las pruebas de aceptación que utilizará el propietario del producto confirman que la historia del usuario está implementada correctamente. Esta suele ser la definición de Hecho en un entorno ágil.
**Si se escribe una historia de usuario y el propietario del producto no está seguro o no tiene claro cómo escribir los criterios de aceptación, esto puede significar que los detalles de la historia no están claros y la conversación sobre la historia debe reiniciarse para aclarar cualquier confusión.**

La característica Probable también es una forma para que el equipo de desarrollo incluya requisitos no funcionales (rendimiento, tiempo de respuesta, usabilidad, etc.) como elementos a probar.

### Product Backlog en Desarrollo Ágil:

Lista dinámica de tareas pendientes para crear el producto, compuesta inicialmente por historias de usuario acordadas entre el product owner y el equipo de desarrollo. Evoluciona constantemente con adiciones, eliminaciones y divisiones de tarjetas durante el proceso de desarrollo. El product owner decide la finalización y lanzamiento del producto, y las tarjetas restantes se reservan para futuros esfuerzos.

## Tareas SMART en Desarrollo Ágil:

Desglosar cada historia de usuario en tareas implementables, fácilmente estimables en esfuerzo y con un tiempo de desarrollo relativamente corto. Las tareas representan el trabajo necesario para implementar las historias de usuario.

La descomposición de historias en tareas es responsabilidad del equipo de desarrollo, no del product owner. Durante la planificación, el equipo asigna estimaciones a las tareas hasta alcanzar el tiempo disponible en la siguiente iteración. En Scrum, las tareas pueden tener valores en puntos según su dificultad percibida. El equipo suma los puntos de las tareas prioritarias hasta alcanzar la velocidad promedio del equipo.

Estas tareas se presentan al product owner, quien aprueba la lista o sugiere cambios ajustando las prioridades en el backlog. Una vez acordadas las historias y tareas, comienza el trabajo. **La identificación y descripción de tareas debe cumplir con los objetivos SMART (Específico, Medible, Alcanzable, Relevante y con un Tiempo Definido).**

- **Specific (Especificas):**
Deben poderce implementar.
- **Measurable (Medibles)**
Saber cuando todos lo requimientos de la tarea han sido completados.Ejm: Paso todos los test.
- **Achievable (Alcanzable):**
El desarrollador lo puede implementar en el tiempo de la iteración o del sprint.
- **Relevant (Relevante):**
Debería agregar valor a la iteración para el cliente.
- **Time-Boxed (Caja de tiempo)**:
Si la tarea es demasiado dificil para terminarla dentro del sprint deber ser divida en otras tareas.

**Sprint/Iteration Backlog**
En scrum solo los desarrolladores pueden agregar mas tareas dentro del sprint

## Investigación de requisitos
Existe una diferencia entre requerimiento, politicas e implementación.

## Why Requirements Digging Is Hard(Por que la busqueda de requerimientos es dificil)

### Problems of Scope(Problemas de alcance)
Preguntar siempre por que es ncesario que esto sea parte del programa?

### Problems of Understanding

El cliente y el desarrollador hablan diferentes lenguajes. Ejm. De negocio y tecnicos. Para encarar esto es ncesario hacer al cliente parte del equipo de desarrollo. En algunos casos contratan uno de estos dos roles system engineers or technical marketers que tienen la vision de los dos mundos.

### Problems of Volatility
Las cosas cambian y no se pueden controlar. Lo que se puede hacer es manejar el cambio. Ejm. Responsbilizar al cliente. Si agregamos esto, nos tardariamos seis semanas mas en terminar lo otro, aun lo quieres.

### Non-Technical Problems 
Se refiere a cosas que no estan dentro del control de los desarrolladores. Ejm la vision opuesta de los managers sobre un requerimiento. El mejor consejo para problemas no técnicos es huir rápidamente. Deje que su vicepresidente se encargue de ello; por eso les pagan mucho dinero.

## Analyzing the Requirements

Necesitas asegurarte que los requerimientos escritos son los indicados.
Analisis de requerimientos tiene tres partes:

- Categorizar y organizar en areas relacionadas.
- Priorizar: Cuales deben ser alzanzados primero.
- Examinar haciendo las siguietes preguntas.
  1. Cada requisito es concistente con el objetivo general del proyecto.?
  2. Este requesito es necesario? Se puede eliminar sin afectar la funcionalidad principal del programa?
  3. Uno de los mas importantes. Es este requerimiento testeable? Escribir test primero, luego el codigo.
  4. Es un requsito factible dentro de los terminos tecnicos? Ejm usar librerias de windows dentro de mac.
  5. Los requsitos no deben ser ambiguos. Esta el requisito planteado con precision.?














