# Requerimientos

Antes de iniciar con el tema de programar es necesario contar con los requerimientos bien especificados, que nos dira que es lo que nuestro programa debe hacer.

## ¿De qué tipos de requisitos estamos hablando?
Realmente estamos hablando de requisitos funcionales, la lista de características que el usuario verá y podrá usar cuando inicie su programa. En lo que respecta al usuario, estos son los únicos requisitos que importan. Para un proceso ágil, el resultado es un conjunto de historias de usuarios que definen el trabajo pendiente del producto.
Durante el proceso de descubrir los requisitos para su proyecto, normalmente verá cuatro tipos diferentes: requisitos de usuario, requisitos de dominio, requisitos no funcionales y no requisitos.

### Requisitos de usuario
Los requisitos del usuario casi siempre se expresan en lenguaje natural. Son los detalles de lo que el usuario espera ver mientras usa el programa. También incluyen descripciones de diseños de pantalla, cuadros de diálogo y menús. Cualquier elemento de interacción en el programa debe describirse en los requisitos del usuario. Por ejemplo:

Iniciar sesión en el sistema: cuando Gloria hace clic en el botón Iniciar sesión en la página principal, aparece un cuadro de diálogo Iniciar sesión en el medio de la pantalla. El cuadro de diálogo de inicio de sesión debe contener dos cuadros de texto, denominados "Nombre de usuario" y "Contraseña". También debe haber dos botones en el cuadro de diálogo, denominados "Enviar" y "Cancelar". Si en algún momento Gloria hace clic en el botón Cancelar, el cuadro de diálogo desaparecerá y volverá a la pantalla anterior.........

Usar maquetas o elemetos graficos que ayuden a la descripcion. 

### Requisitos de dominio

Estos son requisitos que le impone el dominio de aplicación del programa. Si está escribiendo una nueva versión de un programa de impuestos sobre la renta, estará limitado por las últimas regulaciones del IRS. Un programa de libro mayor deberá cumplir con la última edición de los Principios de Contabilidad Generalmente Aceptados (GAAP), y un teléfono inteligente deberá implementar los últimos protocolos del Sistema Global para Comunicaciones Móviles (GSM). 

No es necesario que anotes todos estos requisitos, simplemente consúltalos. 

Un conjunto de requisitos de dominio detallados brinda a los desarrolladores la información que necesitarán durante el diseño del programa. 

**Los requisitos de dominio generalmente se consideran software de “capa intermedia” porque son el corazón de la aplicación, debajo de la interfaz de usuario y encima del sistema operativo, la red o el software de base de datos.**

Muchos requisitos de dominio se implementarán como clases y bibliotecas independientes con sus propias API. Los usuarios se preocupan por los requisitos del dominio sólo en la medida en que afecten a los requisitos del usuario.

### Requerimientos no funcionales
Los requisitos no funcionales son limitaciones de los servicios y funciones del programa y también expectativas sobre el desempeño. Pueden incluir especificaciones de la plataforma de destino, restricciones de tiempo, requisitos de rendimiento, requisitos de uso de memoria, privilegios de acceso a archivos, requisitos de seguridad, tiempos de respuesta, número mínimo de transacciones por segundo, etc. Por lo general, estos son requisitos que pueden no ser visibles para el usuario, pero que sí afectan la experiencia del usuario. Un ejemplo de este tipo de requisito es que su página web debe cargarse y mostrarse en tres segundos.

Es necesario decirles a todas las partes interesadas en un proyecto lo que el programa va a hacer y también lo que no va a hacer. En particular, debe informarles que hay requisitos que no se implementarán, al menos no en la versión actual.

## Recopilación de requisitos en un proyecto basado en un plan

La parte importante y la idea detrás de todo este capítulo es escribir lo que se supone que debe hacer su programa antes de comenzar a codificar.

**¡Pero no me gusta escribir!**

Los requisitos funcionales siempre deben escribirse en un lenguaje natural. 
El lenguaje no sólo determina lo que dices, sino que determina lo que puedes decir (y pensar). Es decir, el lenguaje que utilizas determina qué tipo de pensamientos eres capaz de tener; tiende a limitar tus procesos de pensamiento y, por lo tanto, en qué puedes pensar y cómo expresar tus pensamientos.

**Esquema de una especificación funcional**
Cada especificación de función debe tener los elementos discutidos en las siguientes secciones.

### Descripción general(Overview)

Este es su resumen ejecutivo. Un párrafo o como máximo dos de lo que se supone que debe hacer el programa.

### Descargo de responsabilidad (Disclaimer)
Siempre debe incluir una declaración desde el principio que diga: “Esta especificación aún no está terminada. Si cree que falta algo o que algo está mal, envíeme un correo electrónico”. En algún momento, su descargo de responsabilidad debería cambiar a algo como “Esta especificación es tan completa como lo será para esta versión. Si cree que falta algo o que algo está mal, envíe un correo electrónico al autor y lo consideraremos para la próxima versión”.

### Nombre del Autor(Author’s Name)

Alguien debe ser responsable de la especificación funcional. Ni un comité, ni el equipo de desarrollo, una sola persona. Suele ser el director de desarrollo o el director de proyectos, dependiendo de cómo su empresa configure los proyectos de desarrollo. 

## Escenario de uso ttipico (Scenarios of Typical Usage)

Escenarios de uso típico
Estos son los requisitos reales. Una excelente manera de lograr que los clientes respondan a su lista de requisitos es presentarles varios escenarios de uso típico del programa como parte de la especificación. Esto tiene un par de ventajas:
• Primero, si escribe los escenarios como si fueran historias de usuarios, es más probable que el cliente los lea.
• En segundo lugar, es más probable que los clientes entiendan lo que estás haciendo y propongan ideas sobre cosas que te has pasado por alto o que has hecho mal. Esto siempre es bueno, porque cuantas más aportaciones de los clientes reciba al principio del proceso, más probabilidades tendrá de crear algo que ellos quieran.

En muchas metodologías ágiles, incluido XP, las historias de usuarios suelen escribirse como escenarios. En XP, el cliente es parte del equipo del proyecto, por lo que obtiene comentarios constantes sobre historias de usuarios y compilaciones diarias de programas. En Scrum, no se requiere que el cliente forme parte del equipo del proyecto, pero se le recomienda encarecidamente que se mantenga en estrecho contacto con el equipo. También en Scrum, los sprints más cortos permiten al cliente ver versiones funcionales del producto con más frecuencia. En el Lenguaje Unificado de Modelado (UML, consulte www.uml.org), se utiliza una notación completa para crear casos de uso (otra palabra para escenarios). Pero como ya se mencionó, nada supera al lenguaje natural para describir escenarios de uso. 

## Problemas abiertos(Open Issues)

Cuando escriba por primera vez la especificación funcional, habrá una o dos cosas que no sepa. Esta bien. Simplemente colóquelos en la sección "Problemas abiertos". Luego, cada vez que te reúnas con el cliente, señala esta sección e intenta obtener respuestas. Algunas de estas preguntas pasarán a las secciones de requisitos y otras terminarán en la sección "No requisitos", una vez que obtenga esas respuestas. Sin embargo, al final del proyecto, esta sección debería estar vacía. Si no es así, entonces tienes problemas que te perseguirán.

### Ideas de diseño y nuevas funciones (Design and New Feature Ideas)

Si es como la mayoría de los desarrolladores, intentará diseñar y codificar el programa en su cabeza todo el tiempo que recopile y analice los requisitos. Eso es exactamente lo que hacen los desarrolladores. Los dos tipos de notas que suelen crear los desarrolladores y gerentes de proyectos son notas técnicas que contienen ideas de diseño o codificación para desarrolladores, y notas de marketing que contienen ideas de funciones para el personal de marketing y el cliente. 
**Usar el backlog**

### Una cosa más (one more thing)
Una cosa más sobre la especificación funcional: no te obsesiones. Lo más probable es que haga un buen trabajo al seleccionar los requisitos y anotarlos en la especificación funcional, pero no será tan detallado como desea y no estará completo. No te preocupes. El único momento en que se completa una especificación funcional es cuando se envía la versión. No pierda tiempo intentando corregir cada detalle; No pierda tiempo tratando de extraer todos los requisitos de su cliente. Simplemente no sucederá. Establece un límite de tiempo, haz lo mejor que puedas y déjalo pasar.

## Recopilación de requisitos en un proyecto ágil (Requirements Gathering in an Agile Project)

**No hay especificación funcional fija:**
En proyectos ágiles, no se crea una especificación funcional detallada desde el principio. Se reconoce que los requisitos cambiarán, y se acepta la posibilidad de ajustes continuos a medida que progresa el proyecto.

**Aceptación del cambio:**
La mentalidad ágil implica aceptar y adaptarse a los cambios en los requisitos a lo largo del desarrollo del proyecto. Los equipos ágiles postergan la toma de decisiones sobre requisitos y diseño tanto como sea posible.

**Cliente como parte integral del equipo:**
En entornos ágiles, el cliente forma parte integral del equipo de desarrollo. Esto permite obtener retroalimentación inmediata sobre las implementaciones de funciones y actualizaciones oportunas sobre los requisitos del cliente.

**Historias de usuario como elemento clave:**
La historia del usuario es fundamental en la recopilación de requisitos ágiles. Se describe una característica o escenario que el cliente desea ejecutar, siguiendo la estructura: "Como <rol>, quiero realizar <acción>, de modo que <razón/beneficio>". Esto proporciona información sobre quién, qué y por qué del requisito.

**Enfoque en el quién, qué y por qué:**
Al expresar las historias de usuario, se aborda el "quién" (rol del usuario), el "qué" (acción que se desea realizar) y el "por qué" (razón o beneficio detrás de la acción). Esta estructura ayuda a comprender completamente el contexto del requisito.

En resumen, la recopilación de requisitos en proyectos ágiles se centra en la flexibilidad, la colaboración continua con el cliente y la utilización de historias de usuario para comprender y abordar las necesidades del usuario de manera efectiva.

### Las tres C
Una historia de usuario tiene tres componentes fundamentales. 
- la card
- la conversación
- la confirmación.

### La card

**Soporte Físico para Historias de Usuario:**
Todas las historias de usuario se plasman en tarjetas, que pueden ser notas Post-It, tarjetas índice o pedazos de papel más grandes, destacando la preferencia por un formato físico.

**Invitación a Conversación Colaborativa:**
La tarjeta, aunque contiene la estructura "Como <rol> quiero <acción> para que <beneficio/resultado>," actúa como una invitación a discutir colaborativamente el significado real de la historia y las verdaderas necesidades del usuario.

**Detalle Limitado en la Tarjeta:**
La tarjeta es esencialmente un esbozo de la historia y no proporciona muchos detalles. Sirve como un marcador de posición para el requisito real que se definirá en etapas posteriores del proyecto.

**Formato Físico Preferido:**
Aunque la tarjeta puede variar en su presentación, se destaca que suele ser un objeto físico. Esto enfatiza la tangibilidad como parte integral del proceso.

**Colaboración Continua y Aclaración de Detalles:**
La tarjeta no solo representa la historia de usuario, sino que también fomenta la colaboración. Los interesados pueden escribir, agregar estimaciones y formular preguntas, permitiendo la evolución y clarificación de los requisitos a lo largo del tiempo.
