## Análisis del riesgo

Algunos riesgos a tener en cuenta incluyen los siguientes:
- **Errores de programación**:
No pospongas dar malas noticias.
- **La tasa de defectos es excesiva**:
En cualquier caso, si experimenta una alta tasa de defectos, lo mejor que puede hacer es detenerse, echar un vistazo y encontrar la causa raíz de los defectos antes de agregar más funcionalidad. Esto puede ser muy difícil de hacer desde el punto de vista de la gestión de proyectos, pero al final te lo agradecerás.
- **Malentendido en los requisitos**:
La mejor manera de evitar esta situación es tener al cliente en el sitio con la mayor frecuencia posible y producir productos entregables con la mayor frecuencia posible.
- **Rotación de requisitos:**
En los procesos ágiles, el equipo de desarrollo mantiene el control de la lista de requisitos priorizados (llamada backlog del producto en Scrum) y solo ajusta la lista en puntos establecidos del proyecto, después de las iteraciones en XP y después de cada sprint en Scrum.
- **Rotacion de Personal**
La mejor manera de reducir la rotación es (1) dar a sus desarrolladores un trabajo interesante, (2) hacer que trabajen en un ambiente agradable y (3) darles control sobre sus propios horarios. Por extraño que parezca, el dinero no es uno de los principales motivadores para los desarrolladores de software. Esto no significa que no quieran que les paguen bien, pero sí significa que tirarles más dinero para que trabajen más duro o para evitar que se vayan generalmente no funciona. La mejor manera de mitigar el efecto de la rotación es difundir el conocimiento del proyecto entre todos los miembros del equipo de desarrollo. Principios como la propiedad común del código y técnicas como la programación en pares funcionan para involucrar a todos los miembros del equipo en el producto y difundir el conocimiento del código a todo el equipo. Uno de los mejores libros sobre la gestión y el mantenimiento de desarrolladores de software es Peopleware de Tom DeMarco.2

Una vez que tengas una lista de los riesgos para tu proyecto, debes abordar cada uno de ellos y hablar de dos cosas: evitar y mitigar. Para cada riesgo, piensa en cómo puedes evitarlo. Incorpore holgura en su programación, realice revisiones constantes de código, congele los requisitos antes de tiempo, realice lanzamientos frecuentes, exija la programación en parejas para que difunda el conocimiento del código y cosas por el estilo. Luego, debe pensar en lo que hará si ocurre el peor de los casos; Esto es mitigación. Elimine características de una versión, detenga el trabajo en nuevas características y realice una búsqueda de errores, negocie nuevas características en una versión futura, etc. Si un riesgo se convierte en realidad, tendrás que hacer algo al respecto; Es mejor haber planeado lo que harás de antemano.

## Requisitos de recursos
¿Cuántas personas necesitas para el proyecto? ¿Es necesario que todos comiencen a la vez, o sus fechas de inicio en el proyecto pueden escalonarse a medida que se inician las fases? ¿Cuántos ordenadores necesitas? ¿Qué software utilizarás para el desarrollo? ¿Qué entorno de desarrollo necesitas? ¿Todo el mundo está formado en ese entorno? ¿Qué software y hardware de soporte necesitas? Sí, necesita un sistema de administración de configuración y una máquina de compilación independiente, independientemente del modelo de proceso que esté utilizando.

# Estimaciones de tareas

Tienes que dividir tu trabajo en tareas que no duren más de una semana. Uno o dos días es una apuesta mucho mejor. Mejor aún, nunca haga estimaciones en ninguna unidad excepto en horas-persona.  Una vez que tenga una lista creíble de tareas, puede comenzar a hacer una estimación del tamaño y luego del esfuerzo. El tamaño siempre tiene que ser lo primero, porque no puedes calcular cuánto tiempo tomará algo hasta que tengas una idea de qué tan grande es.

Terminará con estimaciones en términos de KLOC: miles de líneas de código sin comentar. Existen varias técnicas para obtener estimaciones de esfuerzo: COCOMO II,3 análisis de puntos de función y el método Delphi.  El mantra de la estimación es: primero el tamaño, luego las estimaciones de esfuerzo y costos, y finalmente el cronograma. 

El método Delphi es una técnica de estimación rápida y relativamente eficiente.
Encuentre a tres de sus desarrolladores más experimentados. Estas son las personas que tienen más experiencia. 
Luego, proporciónales el desglose de la tarea (suponiendo que no hayan participado ya en el desglose inicial: la situación ideal). Luego pídales que le den tres números para cada tarea: la cantidad de tiempo más corta que debería tomar, la cantidad de tiempo más larga que debería tomar y la cantidad de tiempo “normal” que debería tomar, todo en horas-persona. Una vez que tengas estos números, súmalos todos, los más cortos juntos, los más largos juntos y los “normales” juntos y toma la media. Esas son sus estimaciones para cada tarea: los promedios de las mejores estimaciones realizadas por sus mejores desarrolladores para cada tarea. Luego, utiliza esos valores promedio para cada tarea como la estimación oficial (por ahora) del esfuerzo y procede a crear un cronograma. Finalmente, debe Haga que las personas adecuadas (los desarrolladores que harán el trabajo) hagan todas las estimaciones del proyecto. Los gerentes nunca deberían hacer estimaciones de desarrollo. Incluso si un gerente ha sido desarrollador en el pasado, a menos que esté profundamente involucrado en el trabajo de desarrollo real, no debería estar en el negocio de hacer estimaciones de desarrollo.

## cronograma del proyecto

- Algunas tareas deben iniciar antes que otras.
- Descubra cuál es su ciclo de trabajo. De cada jornada de ocho horas, ¿cuántas horas dedican realmente sus desarrolladores al desarrollo? Debe recordar que leer el correo, asistir a reuniones, revisar códigos, tomar descansos, ir al baño y almorzar consumen tiempo. No se puede dar por sentado que una tarea de ocho horas se realizará en un solo día. Siendo realistas, de cada día de ocho horas, de dos a cuatro horas se consumen con otras cosas, por lo que su ciclo de trabajo puede ser tan bajo como el 50%. cuatro horas al día. Los ciclos de trabajo también pueden variar según la cultura corporativa, por lo que debes averiguar cuál es el tuyo antes de comenzar a programar.
- Tenga en cuenta los fines de semana, las vacaciones, los días de enfermedad, el entrenamiento y el tiempo libre cuando haga el cronograma. Si su desarrollador senior tiene una tarea en la ruta crítica de su proyecto, probablemente necesite saber que se tomará esas vacaciones de tres semanas en mayo.
- No puedes programar a un desarrollador para que trabaje en dos tareas al mismo tiempo.

utilice un software de programación de proyectos para elaborar su cronograma. 
Pero el uso de software de gestión de proyectos real como:
- Microsoft Project,
- Fast Track Scheduling,
- Basecamp
- o Merlin para proyectos basados en planes
- y aplicaciones web como Jira, Pivotal Tracker
- o proyectos ágiles de Trello

  




